{"version":3,"sources":["actions/actionTypes.js","api/yaltisAPI.js","components/EmployeeCard.js","actions/actionCreators.js","components/CharList.js","components/Spiner/Spinner.js","components/EmployeesList.js","hooks/useLocalStorageState.js","components/BirthdayCard.js","components/EmployeesBirthdayList.js","App.js","reportWebVitals.js","reducers/employeesReducer.js","reducers/reducers.js","index.js"],"names":["FETCH_EMPLOYEES","SELECT_EMPLOYEE","UNSELECT_EMPLOYEE","axios","create","baseURL","EmployeeCard","employee","dispatch","useDispatch","onChangeStatus","event","target","value","type","payload","selectEmployee","unSelectEmployee","className","isActive","firstName","lastName","name","checked","onChange","CharList","charWithListEmployees","letter","list","length","map","id","Spinner","EmployeesList","useState","sortedList","setSortedList","employees","useSelector","state","listEmployees","isLoading","key","defaultValue","valueInLocalStorage","window","localStorage","getItem","JSON","parse","setState","useEffect","setItem","stringify","useLocalStorageState","alphabet","sortedListUsers","arrlistUsers","arrAlphabet","forEach","char","sortedUsers","filter","user","toLowerCase","push","sortListByAlphabet","console","log","index","BirthdayCard","selectedEmployee","dob","EmployeesBirthdayList","selectedEmployees","sort","a","b","App","yaltisAPI","get","response","listWithAddedIsActive","data","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducers","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88f3c75d.chunk.js","sourcesContent":["export const FETCH_EMPLOYEES = \"FETCH_EMPLOYEES\";\nexport const SELECT_EMPLOYEE = \"SELECT_EMPLOYEE\";\nexport const UNSELECT_EMPLOYEE = \"UNSELECT_EMPLOYEE\";\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://yalantis-react-school-api.yalantis.com/api/task0/users',\n});\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { selectEmployee, unSelectEmployee } from './../actions/actionCreators';\n\nconst EmployeeCard = ({ employee }) => {\n  const dispatch = useDispatch();\n\n  //get change from radio buttons\n  const onChangeStatus = (event) => {\n    //add employee in Birthday list\n    if (event.target.value === 'true') {\n      dispatch(selectEmployee(employee));\n    }\n    //remove employee from Birthday list\n    if (event.target.value === 'false') {\n      dispatch(unSelectEmployee(employee));\n    }\n  };\n\n  return (\n    <div className=\"employee-card\">\n      <h4 className={employee.isActive === true ? 'active' : ''}>\n        {employee.firstName} {employee.lastName}\n      </h4>\n      {/* RADIO BUTTONS */}\n      <div>\n        <form>\n          {/* NOT ACTIV button */}\n          <div>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"false\"\n                name=\"status\"\n                checked={employee.isActive === false}\n                onChange={onChangeStatus}\n              />{' '}\n              Not Active\n            </label>\n          </div>\n          {/* ACTIVE button */}\n          <div>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"true\"\n                name=\"status\"\n                checked={employee.isActive === true}\n                onChange={onChangeStatus}\n              />{' '}\n              Active\n            </label>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nEmployeeCard.propTypes = {\n  employee: PropTypes.object,\n};\n\nexport default EmployeeCard;\n","import {\n  FETCH_EMPLOYEES,\n  SELECT_EMPLOYEE,\n  UNSELECT_EMPLOYEE,\n} from './actionTypes';\nimport yaltisAPI from './../api/yaltisAPI';\n\n//fetch employees list\nexport const getEmployees = () => {\n  return async (dispatch) => {\n    const response = await yaltisAPI.get();\n\n    //add 'isActive = false' to every users\n    const listWithAddedIsActive = response.data.map((element) => {\n      return { isActive: false, ...element };\n    });\n\n    dispatch({\n      type: FETCH_EMPLOYEES,\n      payload: listWithAddedIsActive,\n    });\n  };\n};\n\n//select epmloyee\nexport const selectEmployee = (employee) => {\n  return {\n    type: SELECT_EMPLOYEE,\n    payload: employee,\n  };\n};\n\n//unselect epmloyee\nexport const unSelectEmployee = (employee) => {\n  return {\n    type: UNSELECT_EMPLOYEE,\n    payload: employee,\n  };\n};\n","import PropTypes from \"prop-types\";\nimport EmployeeCard from \"./EmployeeCard\";\n\nconst CharList = ({ charWithListEmployees }) => {\n  return (\n    <div className=\"char-list\">\n      <h3 className=\"title\">{charWithListEmployees.letter}</h3>\n      {/* if char doesn't have list  = display text */}\n      {charWithListEmployees.list.length === 0 ? (\n        <div className=\"employee-card empty\">Employess List is empty</div>\n      ) : (\n        //else bolow char display employees list\n        charWithListEmployees.list.map((employee) => (\n          <EmployeeCard key={employee.id} employee={employee} />\n        ))\n      )}\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  charWithListEmployees: PropTypes.object,\n};\n\nexport default CharList;\n","import './Spinner.css';\n\nconst Spinner = () => <div className=\"spinner\"></div>;\n\nexport default Spinner;\n","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useLocalStorageState } from '../hooks/useLocalStorageState';\nimport CharList from './CharList';\nimport Spinner from './Spiner/Spinner';\n\nconst EmployeesList = () => {\n  //sort list users by char of alphabet\n  const [sortedList, setSortedList] = useState([]);\n\n  //get employees from state redux\n  const employees = useSelector((state) => state.employees.listEmployees);\n  const isLoading = useSelector((state) => state.employees.isLoading);\n\n  //save data in localStorage - but now I don't know how take this data and use )))\n  const [state, setState] = useLocalStorageState('emloyees', sortedList);\n  useEffect(() => setState(employees), [employees]);\n\n  //array alphabet\n  const alphabet = [\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'h',\n    'i',\n    'j',\n    'k',\n    'l',\n    'm',\n    'n',\n    'o',\n    'p',\n    'q',\n    'r',\n    's',\n    't',\n    'u',\n    'v',\n    'w',\n    'x',\n    'y',\n    'z',\n  ];\n\n  //func sort list users by char of alphabet\n  const sortListByAlphabet = (arrlistUsers, arrAlphabet) => {\n    //new array\n    const sortedList = [];\n\n    arrAlphabet.forEach((char) => {\n      const sortedUsers = {\n        letter: char,\n        list: arrlistUsers.filter(\n          (user) => user.firstName[0].toLowerCase() === char\n        ),\n      };\n      //push to new array\n      sortedList.push(sortedUsers);\n    });\n\n    return sortedList;\n  };\n\n  //one time sorted list and set to sortedList\n  //leter will be use useMemo()\n  useEffect(() => {\n    const sortedListUsers = sortListByAlphabet(employees, alphabet);\n    setSortedList(sortedListUsers);\n  }, [employees]);\n\n  console.log(sortedList);\n\n  //Spinner show when wait upload data\n  if (isLoading)\n    return (\n      <div>\n        Loading... <Spinner />{' '}\n      </div>\n    );\n\n  return (\n    <div className=\"employees-list\">\n      <h3 className=\"title\">Employees</h3>\n\n      {/* EMPLOYEES LIST CONTENT */}\n      {/*charWithListEmployees - object with 2 field (letter and list) */}\n      {/* letter: - it's char alphabet (list: - it's array sorted objects employees by letter */}\n\n      <div className=\"employees-list-content\">\n        {sortedList.length !== 0 &&\n          sortedList.map((charWithListEmployees, index) => {\n            return (\n              <CharList\n                key={index + charWithListEmployees.letter}\n                charWithListEmployees={charWithListEmployees}\n              />\n            );\n          })}\n      </div>\n    </div>\n  );\n};\n\nEmployeesList.propTypes = {\n  employees: PropTypes.array,\n  isLoading: PropTypes.bool,\n};\n\nexport default EmployeesList;\n","import { useState, useEffect } from 'react';\n\n//custom Hook\nexport const useLocalStorageState = (key, defaultValue = '') => {\n  const [state, setState] = useState(() => {\n    //lazy initialName\n    const valueInLocalStorage = window.localStorage.getItem(key);\n    if (valueInLocalStorage) {\n      return JSON.parse(valueInLocalStorage);\n    }\n    return defaultValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n};\n","import PropTypes from 'prop-types';\n\nconst BirthdayCard = ({ selectedEmployee }) => {\n  return (\n    <div className=\"birthday-card\">\n      <h4>\n        {selectedEmployee.firstName} {selectedEmployee.lastName}\n      </h4>\n      <p>Birthday: {selectedEmployee.dob}</p>\n    </div>\n  );\n};\n\nBirthdayCard.propTypes = {\n  employee: PropTypes.object,\n};\n\nexport default BirthdayCard;\n","import PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport BirthdayCard from './BirthdayCard';\n\nconst EmployeesBirthdayList = () => {\n  //get selected Employees from state redux (if employee.isActive === true)\n  const selectedEmployees = useSelector((state) =>\n    state.employees.listEmployees\n      .filter((user) => user.isActive === true)\n      //sort by lastName\n      .sort((a, b) => (a.lastName > b.lastName ? 1 : -1))\n  );\n\n  return (\n    <div className=\"employees-birthday\">\n      <h3 className=\"title\">Employees Birthday</h3>\n      {/* if list from state redux emptye - show text */}\n      {selectedEmployees.length === 0 ? (\n        <div className=\"employee-card empty\">Employess List is empty</div>\n      ) : (\n        selectedEmployees.map((selectedEmployee) => (\n          //THE BIRTHDAY CARD of the One Employee\n          <BirthdayCard\n            key={selectedEmployee.id}\n            selectedEmployee={selectedEmployee}\n          />\n        ))\n      )}\n    </div>\n  );\n};\n\nEmployeesBirthdayList.propTypes = {\n  selectedEmployees: PropTypes.array,\n};\n\nexport default EmployeesBirthdayList;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getEmployees } from './actions/actionCreators';\nimport './App.css';\nimport EmployeesList from './components/EmployeesList';\nimport EmployeesBirthdayList from './components/EmployeesBirthdayList';\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  // //fetch Employees List\n  useEffect(() => {\n    dispatch(getEmployees());\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <EmployeesList />\n      <EmployeesBirthdayList />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  FETCH_EMPLOYEES,\n  SELECT_EMPLOYEE,\n  UNSELECT_EMPLOYEE,\n} from '../actions/actionTypes';\n\nlet initialState = {\n  listEmployees: [],\n  isLoading: true,\n};\n\nexport const employeesReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_EMPLOYEES:\n      return {\n        ...state,\n        listEmployees: action.payload,\n        isLoading: false,\n      };\n    case SELECT_EMPLOYEE:\n      return {\n        ...state,\n        //if user.id from list === id from action -> change isActive = true\n        listEmployees: state.listEmployees.map((user) => {\n          if (user.id === action.payload.id) {\n            return { ...user, isActive: true };\n          }\n          return user;\n        }),\n      };\n    case UNSELECT_EMPLOYEE:\n      return {\n        ...state,\n        //if user.id from list === id from action -> change isActive = false\n        listEmployees: state.listEmployees.map((user) => {\n          if (user.id === action.payload.id) {\n            return { ...user, isActive: false };\n          }\n          return user;\n        }),\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { employeesReducer } from './employeesReducer';\n\nconst rootReducers = combineReducers({\n  employees: employeesReducer,\n});\n\nconst store = createStore(rootReducers, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './reducers/reducers';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}